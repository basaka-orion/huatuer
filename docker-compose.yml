# 华图儿AI创意绘画应用 - Docker Compose配置
version: '3.8'

services:
  # Redis服务 - 用于Celery任务队列和缓存
  redis:
    image: redis:7-alpine
    container_name: huatuer_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - huatuer_network

  # 后端API服务
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: huatuer_backend
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=production
      - REDIS_URL=redis://redis:6379/0
      - DASHSCOPE_API_KEY=${DASHSCOPE_API_KEY}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
    depends_on:
      - redis
    volumes:
      - ./backend:/app
      - backend_uploads:/app/uploads
    networks:
      - huatuer_network

  # Celery Worker - 处理异步任务
  celery_worker:
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: huatuer_celery_worker
    restart: unless-stopped
    command: celery -A backend.app.celery worker --loglevel=info --concurrency=2
    environment:
      - REDIS_URL=redis://redis:6379/0
      - DASHSCOPE_API_KEY=${DASHSCOPE_API_KEY}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
    depends_on:
      - redis
      - backend
    volumes:
      - ./backend:/app
      - backend_uploads:/app/uploads
    networks:
      - huatuer_network

  # Celery Beat - 定时任务调度器
  celery_beat:
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: huatuer_celery_beat
    restart: unless-stopped
    command: celery -A backend.app.celery beat --loglevel=info
    environment:
      - REDIS_URL=redis://redis:6379/0
      - DASHSCOPE_API_KEY=${DASHSCOPE_API_KEY}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
    depends_on:
      - redis
      - backend
    volumes:
      - ./backend:/app
    networks:
      - huatuer_network

  # WebSocket服务 - 实时协作功能
  websocket:
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: huatuer_websocket
    restart: unless-stopped
    ports:
      - "8080:8080"
    command: python -m backend.services.websocket_service
    environment:
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - redis
    volumes:
      - ./backend:/app
    networks:
      - huatuer_network

  # 管理后台
  admin_dashboard:
    build:
      context: .
      dockerfile: admin-dashboard/Dockerfile
    container_name: huatuer_admin
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://backend:5000
      - NEXT_PUBLIC_WS_URL=ws://websocket:8080
    depends_on:
      - backend
    volumes:
      - ./admin-dashboard:/app
      - /app/node_modules
    networks:
      - huatuer_network

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: huatuer_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend
      - admin_dashboard
      - websocket
    networks:
      - huatuer_network

  # 监控服务 - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: huatuer_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - huatuer_network

  # 监控仪表板 - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: huatuer_grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - huatuer_network

# 网络配置
networks:
  huatuer_network:
    driver: bridge

# 数据卷配置
volumes:
  redis_data:
    driver: local
  backend_uploads:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
